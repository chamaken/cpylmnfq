structs depends on libnfnetlink:
    struct nfq_handle
    struct nfq_q_handle
    struct nfif_handle

unimplement functions:
    struct nfnl_handle *nfq_nfnlh()
    int nfq_fd()
    typedef int nfq_callback()
    struct nfq_handle *nfq_open()
    struct nfq_handle *nfq_open_nfnl()
    int nfq_close()
    int nfq_bind_pf()
    int nfq_unbind_pf()
    struct nfq_q_handle *nfq_create_queue()
    int nfq_destroy_queue()
    int nfq_handle_packet()
    int nfq_set_mode()
    int nfq_set_queue_maxlen()
    int nfq_set_queue_flags()
    int nfq_set_verdict()
    int nfq_set_verdict2()
    int nfq_set_verdict_batch()
    int nfq_set_verdict_batch2()
    int nfq_set_verdict_mark()
    int nfq_get_indev_name()
    int nfq_get_physindev_name()
    int nfq_get_outdev_name()
    int nfq_get_physoutdev_name()

    /* message parsing function */
    struct nfqnl_msg_packet_hdr *nfq_get_msg_packet_hdr(struct nfq_data *nfad)
    u_int32_t nfq_get_nfmark(struct nfq_data *nfad)
    int nfq_get_timestamp(struct nfq_data *nfad, struct timeval *tv)

    /* return 0 if not set */
    u_int32_t nfq_get_indev(struct nfq_data *nfad)
    u_int32_t nfq_get_physindev(struct nfq_data *nfad)
    u_int32_t nfq_get_outdev(struct nfq_data *nfad)
    u_int32_t nfq_get_physoutdev(struct nfq_data *nfad)
    int nfq_get_uid(struct nfq_data *nfad, u_int32_t *uid)
    int nfq_get_gid(struct nfq_data *nfad, u_int32_t *gid)
    struct nfqnl_msg_packet_hw *nfq_get_packet_hw(struct nfq_data *nfad)
    int nfq_get_payload(struct nfq_data *nfad, unsigned char **data)
    int nfq_snprintf_xml(char *buf, size_t len, struct nfq_data *tb, int flags)


implementing functions:
    /* New API based on libmnl */
    void nfq_nlmsg_cfg_put_cmd(struct nlmsghdr *nlh, uint16_t pf, uint8_t cmd)
    void nfq_nlmsg_cfg_put_params(struct nlmsghdr *nlh, uint8_t mode, int range)
    void nfq_nlmsg_cfg_put_qmaxlen(struct nlmsghdr *nlh, uint32_t qmaxlen)

    void nfq_nlmsg_verdict_put(struct nlmsghdr *nlh, int id, int verdict)
    void nfq_nlmsg_verdict_put_mark(struct nlmsghdr *nlh, uint32_t mark)
    void nfq_nlmsg_verdict_put_pkt(struct nlmsghdr *nlh, const void *pkt, uint32_t pktlen)

    int nfq_nlmsg_parse(const struct nlmsghdr *nlh, struct nlattr **pkt)


example (nf-queue.c) uses:
    nfq_nlmsg_verdict_put(nlh, id, NF_ACCEPT)
    nfq_nlmsg_parse(nlh, attr)
    nfq_nlmsg_cfg_put_cmd(nlh, AF_INET, NFQNL_CFG_CMD_PF_UNBIND)
    nfq_nlmsg_cfg_put_cmd(nlh, AF_INET, NFQNL_CFG_CMD_PF_BIND)
    nfq_nlmsg_cfg_put_cmd(nlh, AF_INET, NFQNL_CFG_CMD_BIND)
    nfq_nlmsg_cfg_put_params(nlh, NFQNL_COPY_PACKET, 0xffff)

what example do:
    all nlmsg exchanging via global static struct mnl_socket *nl

    /* PF_(UN)BIND is not needed with kernels 3.8 and later */
    send to kernel to prepare:
        NFQNL_MSG_CONFIG / NFQNL_CFG_CMD_PF_UNBIND
        NFQNL_MSG_CONFIG / NFQNL_CFG_CMD_PF_BIND
        NFQNL_MSG_CONFIG / NFQNL_CFG_CMD_BIND
	NFQNL_MSG_CONFIG / queue_num
	    NFQNL_COPY_PACKET / 0xffff
	    NFQA_CFG_FLAGS / htonl(NFQA_CFG_F_GSO)
	    NFQA_CFG_MASK / htonl(NFQA_CFG_F_GSO)

    /* ENOBUFS is signalled to userspace when packets were lost
     * on kernel side.  In most cases, userspace isn't interested
     * in this information, so turn it off.
     */
    mnl_socket_setsockopt(nl, NETLINK_NO_ENOBUFS, &ret, sizeof(int))

    loop - call queue_cb() on each time receiving nlmsg:
	struct nlattr *attr[NFQA_MAX+1] = {}
	nfq_nlmsg_parse(nlh, attr)
	struct nfgenmsg *nfg = nfg = mnl_nlmsg_get_payload(nlh)

	check attr[NFQA_PACKET_HDR]

	void *payload = mnl_attr_get_payload(attr[NFQA_PAYLOAD])

	uint32_t skbinfo = attr[NFQA_SKB_INFO] ? ntohl(mnl_attr_get_u32(attr[NFQA_SKB_INFO])) : 0
	if (skbinfo & NFQA_SKB_GSO)
	if (skbinfo & NFQA_SKB_CSUMNOTREADY)

	uint16_t plen = mnl_attr_get_payload_len(attr[NFQA_PAYLOAD])
	uint32_t orig_len = ntohl(mnl_attr_get_u32(attr[NFQA_CAP_LEN]))
	if (orig_len != plen)

	struct nfqnl_msg_packet_hdr *ph = mnl_attr_get_payload(attr[NFQA_PACKET_HDR])
	id = ntohl(ph->packet_id)
	printf("packet received (id=%u hw=0x%04x hook=%u, payload len %u",
		id, ntohs(ph->hw_protocol), ph->hook, plen)

	nfq_send_verdict(ntohs(nfg->res_id), id)
	    send NFQNL_MSG_VERDICT / queue_num / id, NF_ACCEPT
